{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","classes","dialog","active","to","name","Message","message","validationSchemaForm","Yup","shape","newMessageBody","max","required","AddMessageForm","initialValues","validationSchema","onSubmit","values","resetForm","sendMessage","addNewMessage","FieldElement","fieldType","placeholder","type","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","messagesElements","messages","dialogsItems","compose","connect","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,kFCWpMC,EATI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,qBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,OAA/C,SACE,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCDjBC,EAJC,SAACT,GACf,OAAO,qBAAKG,UAAWC,IAAQM,QAAxB,SAAkCV,EAAMU,W,gCCgD3CC,EAAuBC,MAAaC,MAAM,CAC9CC,eAAgBF,MACbG,IAAI,GAAI,iBACRC,SAAS,oBAGRC,EAAiB,SAACjB,GAItB,OACE,8BACE,cAAC,IAAD,CACEkB,cAAe,CACbJ,eAAgB,IAElBK,iBAAkBR,EAClBS,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,WAVP,SAACD,GACnBrB,EAAMuB,YAAYF,GAUZG,CAAcH,EAAOP,gBACrBQ,EAAU,CAAED,OAAQ,MAPxB,SAUG,kBACC,eAAC,IAAD,WACE,8BACE,cAACI,EAAA,EAAD,CACEC,UAAW,WACXlB,KAAM,iBACNmB,YAAa,yBAGjB,8BACE,wBAAQC,KAAM,SAAd,oCAUCC,EAhFC,SAAC7B,GACf,IAAI8B,EAAQ9B,EAAM+B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAC7B,GAAD,OACtC,cAAC,EAAD,CAAYG,KAAMH,EAAOG,KAAsBN,GAAIG,EAAOH,IAAtBG,EAAOH,OAGzCiC,EAAmBL,EAAMM,SAASF,KAAI,SAACxB,GAAD,OACxC,cAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQR,OAKlD,OACE,sBAAKC,UAAWC,IAAQ6B,QAAxB,UACE,qBAAK9B,UAAWC,IAAQiC,aAAxB,SAIGL,IAKH,sBAAK7B,UAAWC,IAAQgC,SAAxB,UAIGD,EACD,cAAC,EAAD,CAAgBZ,YAAavB,EAAMuB,qB,wBC2B5Be,sBACbC,aAvBoB,SAACT,GACrB,MAAO,CACLC,YAAaD,EAAMC,gBAIE,SAACS,GACxB,MAAO,CACLjB,YAAa,SAACT,GACZ0B,EAASC,YAAmB3B,SAehC4B,IAFaJ,CAGbT","file":"static/js/4.9c37864f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3VsdD\",\"dialogsItems\":\"Dialogs_dialogsItems__ENcqd\",\"active\":\"Dialogs_active__2gLzz\",\"dialog\":\"Dialogs_dialog__31SuK\",\"messages\":\"Dialogs_messages__o8rEN\",\"message\":\"Dialogs_message__1V4FJ\"};","import classes from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={classes.dialog + \" \" + classes.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import classes from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return <div className={classes.message}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {\r\n  sendMessageCreator,\r\n  updateNewMessageTextCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport FieldElement from \"../common/Formik/Form/FieldElement\";\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((dialog) => (\r\n    <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />\r\n  ));\r\n\r\n  let messagesElements = state.messages.map((message) => (\r\n    <Message message={message.message} key={message.id} />\r\n  ));\r\n\r\n  // if(!props.isAuth) return <Redirect to=\"/login\" />\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogsItems}>\r\n        {/* <DialogItem name={dialogs[0].name} id={dialogs[0].id} />\r\n        <DialogItem name={dialogs[1].name} id={dialogs[1].id} />\r\n        <DialogItem name={dialogs[2].name} id={dialogs[2].id} /> */}\r\n        {dialogsElements}\r\n        {/* <DialogItem name=\"Artur\" id=\"1\" />\r\n        <DialogItem name=\"Edgar\" id=\"2\" />\r\n        <DialogItem name=\"Vadim\" id=\"3\" /> */}\r\n      </div>\r\n      <div className={classes.messages}>\r\n        {/* <Message message={messages[0].message} />\r\n        <Message message={messages[1].message} />\r\n        <Message message={messages[2].message} /> */}\r\n        {messagesElements}\r\n        <AddMessageForm sendMessage={props.sendMessage} />\r\n        {/* <Message message=\"Hi\" />\r\n        <Message message=\"How are you?\" />\r\n        <Message message=\"Bye!\" /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst validationSchemaForm = Yup.object().shape({\r\n  newMessageBody: Yup.string()\r\n    .max(30, \"Max length 30\")\r\n    .required(\"Required field\"),\r\n});\r\n\r\nconst AddMessageForm = (props) => {\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values);\r\n  };\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{\r\n          newMessageBody: \"\",\r\n        }}\r\n        validationSchema={validationSchemaForm}\r\n        onSubmit={(values, { resetForm }) => {\r\n          addNewMessage(values.newMessageBody);\r\n          resetForm({ values: \"\" });\r\n        }}\r\n      >\r\n        {() => (\r\n          <Form>\r\n            <div>\r\n              <FieldElement\r\n                fieldType={\"textarea\"}\r\n                name={\"newMessageBody\"}\r\n                placeholder={\"Enter your message\"}\r\n              />\r\n            </div>\r\n            <div>\r\n              <button type={\"submit\"}>Add message</button>\r\n              {/* <button onClick={onSendMessageClick}>Add message</button> */}\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\n// import StoreContext from \"../../StoreContext\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n// const DialogsContainer = (props) => {\r\n//   // let state = props.store.getState().dialogsPage;\r\n\r\n//   // let onSendMessageClick = () => {\r\n//   //   props.store.dispatch(sendMessageCreator());\r\n//   // };\r\n\r\n//   // let onMessageChange = (text) => {\r\n//   //   props.store.dispatch(updateNewMessageTextCreator(text));\r\n//   // };\r\n\r\n//   return (\r\n//     <StoreContext.Consumer>\r\n//       {(store) => {\r\n//         let state = store.getState().dialogsPage;\r\n\r\n//         let onSendMessageClick = () => {\r\n//           store.dispatch(sendMessageCreator());\r\n//         };\r\n\r\n//         let onMessageChange = (text) => {\r\n//           store.dispatch(updateNewMessageTextCreator(text));\r\n//         };\r\n\r\n//         return (\r\n//           <Dialogs\r\n//             updateMessageText={onMessageChange}\r\n//             sendMessage={onSendMessageClick}\r\n//             dialogsPage={state}\r\n//           />\r\n//         );\r\n//       }}\r\n//     </StoreContext.Consumer>\r\n//   );\r\n// };\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n// const DialogsContainer = connect(\r\n//   mapStateToProps,\r\n//   mapDispatchToProps\r\n// )(AuthRedirectComponent);\r\n\r\n// export default DialogsContainer;\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}